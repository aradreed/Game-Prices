#!/usr/bin/env ruby

# Video Game Prices v 0.5.1
# Arad Reed
# Add options for platform and other search criteria

require 'optparse'
require 'mechanize'

def printGame(title, loose_price, new_price, complete_price = 0)
  # Display the game info in a moderately pretty format
  printf("%-30s%-10s%-10s%-10s\n", title, loose_price, complete_price, new_price)
end

# Switches
options = {}

optparse = OptionParser.new do |opts|   
  opts.banner = "Usage: ./gamePrices [options] video game" 
  
  opts.on( '-p', '--platform', 'Search on a specific platform' ) do |p|     
    options[:platform] = p
    puts "This option has not been implemented yet.."
  end
  
  opts.on( '-h', '--help', 'Display this screen' ) do     
    puts opts     
    exit   
  end
end

optparse.parse!

# Game search
game = ARGV.join("+")
link = "http://videogames.pricecharting.com/search?q=#{game}&type=videogames&go=Go"

mech = Mechanize.new

page = mech.get(link)

# If the link is still the same, we're on the search page. Otherwise, we're on the game's page
if (page.uri.to_s == link) 
  # Display all search results
  # Game array, containing all the data that needs parsed for each game
  # Split by artbitrary number of whitespace (games are separated by more whitespace than game data)
  games = page.search('//table[@id="games_table"]/tbody/tr').text.split(/\s{30,}/)
  
  # Get rid of any blank data
  games.delete_if { |data| !data.match(/\w/) }
  puts games
else
  title = page.at('//h1[@id="product_name"]').text.split(/prices/i)[0].strip
  loose_price = page.at('//td[@id="used_price"]').text.strip
  new_price = page.at('//td[@id="new_price"]').text.strip
  complete_price = page.at('//td[@id="complete_price"]').text.strip
  printGame(title, loose_price, new_price, complete_price)
end