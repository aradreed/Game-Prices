#!/usr/bin/env ruby

# Video Game Prices v 0.75
# Arad Reed
# Add console to display (necessary to differentiate games)

require 'optparse'
require 'mechanize'

def header
  printf("%-4s%-50s%-10s%-10s%-10s\n", "#", "Title", "Loose", "Complete", "New")
  print "-" * 84
  puts
end

def printGame(title, loose_price, new_price, complete_price, number = 0)
  # Display the game info in a moderately pretty format
  title = "#{title[0, 40]} (...)" if (title.length > 40)
  printf("%-4s%-50s%-10s%-10s%-10s\n", number, title, loose_price, complete_price, new_price)
end

# Switches
options = {}

optparse = OptionParser.new do |opts|   
  opts.banner = "Usage: ./gamePrices [options] video game" 
  
  opts.on( '-p', '--platform  "PLATFORM"', 'Search on a specific platform (quotes if platform contains spaces)' ) do |platform| 
    consoles = ["amiibo", "atari 2600", "atari 400", "atari 5200", "atari 7800", "cd-i", "gameboy", "gameboy advance", "gameboy color", "gamecube", "macintosh", "nes", "nintendo 3ds", "nintendo 64", "nintendo ds", "pc games", "sega genesis", "super nintendo", "virtual boy", "wii", "wii u"]   
    platform.downcase!
    
    options[:platform] = platform if consoles.include?(platform) or abort "Platform argument is invalid"
      
    ARGV.delete(platform)
  end
  
  opts.on( '-h', '--help', 'Display this screen' ) do     
    puts opts     
    exit   
  end
end

optparse.parse!

# Game search
game = ARGV.join("+")
link = "http://videogames.pricecharting.com/search?q=#{game}&type=videogames&go=Go"

page = Mechanize.new.get(link)

# If the link is still the same, we're on the search page. Otherwise, we're on the game's page
if (page.uri.to_s == link) 
  # Display all search results
  # Game array, containing all the data that needs parsed for each game
  # Split by artbitrary number of whitespace (games are separated by more whitespace than game data)
  games = page.search('//table[@id="games_table"]/tbody/tr').text.strip.split(/\s{30,}/)
  
  # Begin display
  header
  
  games.each_with_index do |game, i| 
    # Gives Title, Console, Genre, Loose Price, New Price
    game_data = game.strip.split(/\s{2,}/)
    
    # Check for a specific platform search
    if (options[:platform])
      if (options[:platform] == game_data[1].downcase)
        printGame(game_data[0].strip, game_data[3].strip, game_data[4].strip, "none", i)
      end
    else 
      printGame(game_data[0].strip, game_data[3].strip, game_data[4].strip, "none", i)
    end
  end
  
else
  # Specific game page
  title = page.at('//h1[@id="product_name"]').text.split(/prices/i)[0].strip
  loose_price = page.at('//td[@id="used_price"]').text.strip
  new_price = page.at('//td[@id="new_price"]').text.strip
  complete_price = page.at('//td[@id="complete_price"]').text.strip
  
  header
  printGame(title, loose_price, new_price, complete_price)
end

# Open page in browser or exit
while true
  puts "\nEnter open to open the game's page in your browser. Press enter to exit"

  case STDIN.gets.chomp

  when "open"
    system("open #{page.uri}")
  when "search"
    print "Enter search term: "
    search = STDIN.gets.chomp
    system("#{$0} #{search}")
    break
  else
    exit
  end
end